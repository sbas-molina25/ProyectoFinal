/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.epn.poo.Interfaces;

import com.epn.poo.ClasesAdministracionColegio.*;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sebas Molina
 */
public class CrearCurso extends javax.swing.JDialog {

    DefaultComboBoxModel<String> nombresMateria;
    DefaultTableModel modeloTabla;
    ArrayList<Profesor> listaProfesores;
    ArrayList<Estudiante> listaEstudiante;
    Curso cursoG = new Curso();

    /**
     * Creates new form CrearCurso
     *
     * @param parent
     * @param listaEstudiantes
     * @param listaProfesor
     * @param modal
     */
    public CrearCurso(java.awt.Frame parent, ArrayList<Estudiante> listaEstudiantes, ArrayList<Profesor> listaProfesor, boolean modal) {
        super(parent, modal);
        initComponents();
        jTablaEstudiantes.setVisible(false);
        jScrollPane1.setVisible(false);
        jLabel4.setVisible(false);
        jBAgregarEstudiante.setVisible(false);
        jBCrearCurso.setVisible(false);
        this.listaProfesores = listaProfesor;
        this.listaEstudiante = listaEstudiantes;
        settearMateriasEnCB();
        cargarDatosEstudianteEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTNombreCurso = new javax.swing.JTextField();
        jCBMaterias = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jBAgregarMateria = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaEstudiantes = new javax.swing.JTable();
        jBAgregarEstudiante = new javax.swing.JButton();
        jBCrearCurso = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("CREAR CURSO");

        jLabel2.setText("Nombre:");

        jCBMaterias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBMateriasActionPerformed(evt);
            }
        });

        jLabel3.setText("Materia (Puede agregar maximo 3):");

        jBAgregarMateria.setText("AGREGAR ");
        jBAgregarMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarMateriaActionPerformed(evt);
            }
        });

        jTablaEstudiantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Estudiantes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTablaEstudiantes);

        jBAgregarEstudiante.setText("AGREGAR ");
        jBAgregarEstudiante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarEstudianteActionPerformed(evt);
            }
        });

        jBCrearCurso.setText("CREAR CURSO");
        jBCrearCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCrearCursoActionPerformed(evt);
            }
        });

        jLabel4.setText("Estudiantes (Puede agregar maximo 10): ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(jLabel4)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTNombreCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jCBMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jBCrearCurso)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(168, 168, 168))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jBAgregarMateria)
                        .addGap(203, 203, 203))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jBAgregarEstudiante)
                        .addGap(51, 51, 51))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTNombreCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCBMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBAgregarMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jBAgregarEstudiante)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jBCrearCurso)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCrearCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCrearCursoActionPerformed
        // TODO add your handling code here:
        if (cursoG.getListaProfesores().size() != 3) {
            JOptionPane.showMessageDialog(null, "El curso debe tener tres materias/profesores para ser creado"); //Verifica que haya 3 materias antes de registrar los datos
            return;
        }
        if (cursoG.getListaEstudiantes().size() < 10) {
            JOptionPane.showMessageDialog(null, "El curso debe tener diez estudiantes para ser creado"); //Verifica que haya 10 estudiantes antes de registrar los datos
            return;
        }
        cursoG.setNombreCurso(jTNombreCurso.getText());
        JOptionPane.showMessageDialog(null, "Curso creado con exito");
        this.dispose();
    }//GEN-LAST:event_jBCrearCursoActionPerformed

    private void jCBMateriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBMateriasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBMateriasActionPerformed

    private void jBAgregarEstudianteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarEstudianteActionPerformed
        // TODO add your handling code here:
        cursoG.agregarEstudianteEnCurso(getEstudianteSeleccionado(listaEstudiante));
        if (cursoG.getListaEstudiantes().size() == 10) {
            JOptionPane.showMessageDialog(null, "Se alcanzo el limite de estudiantes por curso"); //Verifica que no ingrese mas de 10 estudiantes 
            jBCrearCurso.setVisible(true);
            jBAgregarEstudiante.setVisible(false);
            return;
        }
        modeloTabla.removeRow(jTablaEstudiantes.getSelectedRow()); // Eliminar del jtable al estudiante seleccionado, para no seleccionarlo dos veces
        jTablaEstudiantes.clearSelection(); //Quita la seleccion anterior
    }//GEN-LAST:event_jBAgregarEstudianteActionPerformed

    private void jBAgregarMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarMateriaActionPerformed
        // TODO add your handling code here:
        cursoG.agregarProfesorEnCurso(getProfesorSeleccionado(listaProfesores));
        if (cursoG.getListaProfesores().size() == 3) {
            JOptionPane.showMessageDialog(null, "Se alcanzo el limite de materias/profesores por curso");//Verifica que no ingrese mas de 3 materias 
            jTablaEstudiantes.setVisible(true);
            jScrollPane1.setVisible(true);
            jLabel4.setVisible(true);
            jBAgregarEstudiante.setVisible(true);
            jBAgregarMateria.setVisible(false);
            return;
        }
        int seleccionado = jCBMaterias.getSelectedIndex();
        if (seleccionado != 0) {
            jCBMaterias.removeItemAt(seleccionado); //Elimina la opcion seleccionada despues de registrarla, para que no se repita
            jCBMaterias.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jBAgregarMateriaActionPerformed

    //Metodo para retornar el curso creado
    public Curso getCursoCreado() {
        return cursoG;
    }

    //Metodo para retornar el idSeleccionado del Profesor en el JComboBox
    public String getIdSeleccionado() {
        String jcbSeleccion = (String) jCBMaterias.getSelectedItem();
        String[] partes = jcbSeleccion.split("-");
        return partes[0];
    }

    //Metodo para buscar el profesor dependiendo de que escogio en el JComboBox, y retornarlo
    public Profesor getProfesorSeleccionado(ArrayList<Profesor> listaProf) {
        String profSeleccionado = getIdSeleccionado();
        for (Profesor p : listaProf) {
            if (p.getUsuarioProf().equals(profSeleccionado)) {
                return p;
            }
        }
        return null;
    }

    //Metodo para retornar el nombre del estudiante seleccionado en el JTable
    public String getNombreEstudianteSeleccionado() {
        String nombreEstudiante = "";
        int filaSeleccionada = jTablaEstudiantes.getSelectedRow();
        if (filaSeleccionada != -1) {
            nombreEstudiante = jTablaEstudiantes.getValueAt(filaSeleccionada, 0).toString();
        }
        return nombreEstudiante;
    }

    //Metodo para buscar el estudiante dependiendo del nombre seleccionado en el JTable, y retornarlo
    public Estudiante getEstudianteSeleccionado(ArrayList<Estudiante> listaEst) {
        String nombreSeleccionado = getNombreEstudianteSeleccionado(); //Se utiliza el metodo para obtener el String de nombreSeleccionado
        for (Estudiante e : listaEst) {
            if (e.getNombreP().equals(nombreSeleccionado)) {
                return e;
            }
        }
        return null;
    }

    //Metodo para ingresar los datos del ArrayList de Profesores en el JComboBox
    public void settearMateriasEnCB() {
        nombresMateria = new DefaultComboBoxModel<>();
        nombresMateria.addElement("Seleccione una opcion...");
        ArrayList<String> materiaYProfesor = new ArrayList<>();
        for (Profesor p : listaProfesores) {
            materiaYProfesor.add(p.getUsuarioProf() + "-" + p.getNombreP() + "-" + p.getEspecialidadProf());
        }

        for (String s : materiaYProfesor) {
            nombresMateria.addElement(s);
        }
        jCBMaterias.setModel(nombresMateria);
    }

    //Metodo para ingresar los datos de estudiante en el JTable
    public void cargarDatosEstudianteEnTabla() {
        modeloTabla = (DefaultTableModel) jTablaEstudiantes.getModel();
        modeloTabla.setRowCount(0);
        for (Estudiante est : listaEstudiante) {
            Object[] fila = {est.getNombreP()};
            modeloTabla.addRow(fila);
        }
        jTablaEstudiantes.setModel(modeloTabla);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrearCurso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrearCurso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrearCurso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearCurso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                CrearCurso dialog = new CrearCurso(new javax.swing.JFrame(), new ArrayList<>(), new ArrayList<>(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregarEstudiante;
    private javax.swing.JButton jBAgregarMateria;
    private javax.swing.JButton jBCrearCurso;
    private javax.swing.JComboBox<String> jCBMaterias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTNombreCurso;
    private javax.swing.JTable jTablaEstudiantes;
    // End of variables declaration//GEN-END:variables
}
