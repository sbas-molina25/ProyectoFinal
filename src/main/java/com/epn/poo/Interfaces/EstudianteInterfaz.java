/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.epn.poo.Interfaces;

import com.epn.poo.ClasesAdministracionColegio.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sebas
 */
public class EstudianteInterfaz extends javax.swing.JDialog {

    DefaultTableModel modeloTabla;
    ArrayList<Calificaciones> listaCalificaciones = new ArrayList<>();
    ArrayList<Estudiante> listaEstudiante = new ArrayList<>();
    ArrayList<Profesor> listaProfesores = new ArrayList<>();
    String userEstudiante;

    /**
     * Creates new form Estudiante
     *
     * @param parent
     * @param userEstudiante
     * @param modal
     */
    public EstudianteInterfaz(java.awt.Frame parent, String userEstudiante, boolean modal) {
        super(parent, modal);
        initComponents();
        this.listaEstudiante = cargarEstudiantesDesdeArchivo("archivos/registrosEstudiante");
        this.listaProfesores = cargarProfesoresDesdeArchivo("archivos/registrosProfesor");
        this.userEstudiante = userEstudiante;
        this.listaCalificaciones = cargarCalificacionesDesdeArchivo("archivos/registrosCalificacion");
        jTUserEst.setText(userEstudiante);
        cargarDatosCalificacionesEnTabla();
    }

    public void cargarDatosCalificacionesEnTabla() {
        modeloTabla = (DefaultTableModel) jTableCalificaciones.getModel();
        modeloTabla.setRowCount(0);

        for (Calificaciones cal : listaCalificaciones) {
            if (cal.getEstudianteCal().getUsuarioEst().equals(userEstudiante)) {
                String estado;
                if (cal.getNota() < 14) {
                    estado = "APROBADO";
                } else {
                    estado = "REPROBADO";
                }
                Object[] fila = {cal.getEstudianteCal().getNombreP(), cal.getProfesorCal().getEspecialidadProf(), cal.getNota(), estado};
                modeloTabla.addRow(fila);
            }
        }
        jTableCalificaciones.setModel(modeloTabla);
    }

    public ArrayList<Calificaciones> cargarCalificacionesDesdeArchivo(String ruta) {
        ArrayList<Calificaciones> lista = new ArrayList<>();
        boolean repetido = false;
        try (BufferedReader br = new BufferedReader(new FileReader(ruta))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length == 4) {
                    String idM = partes[0];
                    for (Calificaciones cal : listaCalificaciones) {
                        if (cal.getCodigoCal().equals(idM)) {
                            repetido = true;
                            break;
                        }
                    }
                    Estudiante est = buscarEstudiantePorCodigo(partes[1]);
                    Profesor prof = buscarProfesorPorCodigo(partes[2]);
                    if (est != null && prof != null) {
                        Calificaciones cali = new Calificaciones();
                        cali.setCodigoCal(partes[0]);
                        cali.setEstudianteCal(est);
                        cali.setProfesorCal(prof);
                        cali.setNota(Double.parseDouble(partes[3]));
                        lista.add(cali);
                    } else {
                        System.err.println("Estudiante o profesor no encontrado para calificación con código: " + partes[0]);
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al cargar calificaciones: " + e.getMessage());
        }
        return lista;
    }

    public Estudiante buscarEstudiantePorCodigo(String codigo) {
        for (Estudiante e : listaEstudiante) {
            if (e.getUsuarioEst().equals(codigo)) {
                return e;
            }
        }
        return null;
    }

    public Profesor buscarProfesorPorCodigo(String codigo) {
        for (Profesor p : listaProfesores) {
            if (p.getUsuarioProf().equals(codigo)) {
                return p;
            }
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTUserEst = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCalificaciones = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("CALIFICACIONES DE ESTUDIANTE");

        jTUserEst.setEditable(false);

        jTableCalificaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ESTUDIANTE", "MATERIA", "NOTA", "ESTADO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCalificaciones.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(jTableCalificaciones);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTUserEst, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addComponent(jTUserEst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public ArrayList<Estudiante> cargarEstudiantesDesdeArchivo(String ruta) {
        ArrayList<Estudiante> lista = new ArrayList<>();
        boolean repetido = false;
        try (BufferedReader br = new BufferedReader(new FileReader(ruta))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length == 6) {
                    String user = partes[0];
                    for (Estudiante e : listaEstudiante) {
                        if (e.getUsuarioEst().equals(user)) {
                            repetido = true;
                            break;
                        }
                    }
                    if (!repetido) {
                        Estudiante est = new Estudiante();
                        est.setUsuarioEst(partes[0]);
                        est.setContrasenaEst(partes[1]);
                        est.setNombreP(partes[2]);
                        est.setCedulaP(partes[3]);
                        est.setEdadP(Integer.parseInt(partes[4]));
                        est.setTelefonoP(partes[5]);
                        lista.add(est);
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al cargar estudiante: " + e.getMessage());
        }
        return lista;
    }
    
    public ArrayList<Profesor> cargarProfesoresDesdeArchivo(String ruta) {
        ArrayList<Profesor> lista = new ArrayList<>();
        boolean repetido = false;
        try (BufferedReader br = new BufferedReader(new FileReader(ruta))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length == 7) {
                    String user = partes[0];
                    for (Profesor p : listaProfesores) {
                        if (p.getUsuarioProf().equals(user)) {
                            repetido = true;
                            break;
                        }
                    }
                    if (!repetido) {
                        Profesor prof = new Profesor();
                        prof.setUsuarioProf(partes[0]);
                        prof.setContrasenaProf(partes[1]);
                        prof.setNombreP(partes[2]);
                        prof.setEdadP(Integer.parseInt(partes[3]));
                        prof.setCedulaP(partes[4]);
                        prof.setTelefonoP(partes[5]);
                        prof.setEspecialidadProf(partes[6]);
                        lista.add(prof);
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al cargar profesor: " + e.getMessage());
        }
        return lista;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EstudianteInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EstudianteInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EstudianteInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EstudianteInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                EstudianteInterfaz dialog = new EstudianteInterfaz(new javax.swing.JFrame(), new String(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTUserEst;
    private javax.swing.JTable jTableCalificaciones;
    // End of variables declaration//GEN-END:variables
}
