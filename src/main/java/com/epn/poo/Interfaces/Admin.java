/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.epn.poo.Interfaces;

import com.epn.poo.ClasesAdministracionColegio.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Sebas
 */
public class Admin extends javax.swing.JDialog {

    ArrayList<Estudiante> listaEstudiante = new ArrayList<>();
    ArrayList<Profesor> listaProfesores = new ArrayList<>();
    ArrayList<Curso> listaCursos = new ArrayList<>();

    /**
     * Creates new form Admin
     *
     * @param parent
     * @param modal
     */
    public Admin(java.awt.Frame parent, boolean modal) throws Exception {
        super(parent, modal);
        initComponents();
        //this.listaEstudiante = new ArrayList<>();
        this.listaEstudiante = cargarEstudiantesDesdeArchivo("archivos/registrosEstudiante");
        this.listaProfesores = cargarProfesoresDesdeArchivo("archivos/registrosProfesor");
        this.listaCursos = cargarCursosDesdeArchivo("archivos/regitrosCurso");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jBMatricularEstudiante = new javax.swing.JButton();
        jBCrearNuevoCurso = new javax.swing.JButton();
        jBContratarProfesor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("ADMINISTRADOR");

        jBMatricularEstudiante.setText("MATRICULAR ESTUDIANTE");
        jBMatricularEstudiante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMatricularEstudianteActionPerformed(evt);
            }
        });

        jBCrearNuevoCurso.setText("CREAR NUEVO CURSO");
        jBCrearNuevoCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCrearNuevoCursoActionPerformed(evt);
            }
        });

        jBContratarProfesor.setText("CONTRATAR PROFESOR");
        jBContratarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBContratarProfesorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBCrearNuevoCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBMatricularEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBContratarProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jBMatricularEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBContratarProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBCrearNuevoCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCrearNuevoCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCrearNuevoCursoActionPerformed
        // TODO add your handling code here:
        CrearCurso crearCurso = new CrearCurso(null, listaEstudiante, listaProfesores, true);
        crearCurso.setLocationRelativeTo(null);
        crearCurso.setVisible(true);
        agregarCurso(crearCurso.getCursoCreado());
        guardarCursoEnArchivo("archivos/regitrosCurso", listaCursos);
    }//GEN-LAST:event_jBCrearNuevoCursoActionPerformed

    private void jBMatricularEstudianteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMatricularEstudianteActionPerformed
        // TODO add your handling code here:
        MatricularEstudiante matricular = new MatricularEstudiante(null, true);
        matricular.setLocationRelativeTo(null);
        matricular.setVisible(true);
        agregarEstudiante(matricular.getEstudianteCreado());
        guardarEstudiantesEnArchivo("archivos/registrosEstudiante", listaEstudiante);
    }//GEN-LAST:event_jBMatricularEstudianteActionPerformed

    private void jBContratarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBContratarProfesorActionPerformed
        // TODO add your handling code here:
        ContratarProfesor contratar = new ContratarProfesor(null, true);
        contratar.setLocationRelativeTo(null);
        contratar.setVisible(true);
        agregarProfesor(contratar.getProfesorCreado());
        guardarProfesoresEnArchivo("archivos/registrosProfesor", listaProfesores);
    }//GEN-LAST:event_jBContratarProfesorActionPerformed

    public ArrayList<Estudiante> getListaEstudianteCreada() {
        return listaEstudiante;
    }
    
    public ArrayList<Profesor> getListaProfesorCreada() {
        return listaProfesores;
    }
    
    public ArrayList<Curso> getListaCursoCreado() {
        return listaCursos;
    }

    public void agregarEstudiante(Estudiante nuevoEst) {
        for (Estudiante e : listaEstudiante) {
            if (e.getUsuarioEst().equals(nuevoEst.getUsuarioEst())) {
                JOptionPane.showMessageDialog(null, "Estudiante ya registrado con esa usuario");
                return;
            }
        }
        listaEstudiante.add(nuevoEst);
    }

    public void agregarProfesor(Profesor nuevoProf) {
        for (Profesor p : listaProfesores) {
            if (p.getUsuarioProf().equals(nuevoProf.getUsuarioProf())) {
                JOptionPane.showMessageDialog(null, "Profesor ya registrado con ese usuario");
                return;
            }
        }
        listaProfesores.add(nuevoProf);
    }

    public void agregarCurso(Curso nuevoCurso) {
        
        for (Curso c : listaCursos) {
            if (c.getIdCurso().equals(nuevoCurso.getIdCurso())) {
                System.out.println("codigo curso creado " + nuevoCurso.getIdCurso());
                JOptionPane.showMessageDialog(null, "Curso ya registrado con ese usuario");
                return;
            }
        }
        listaCursos.add(nuevoCurso);
    }

    public ArrayList<Estudiante> cargarEstudiantesDesdeArchivo(String ruta) throws Exception {
        ArrayList<Estudiante> lista = new ArrayList<>();
        boolean repetido = false;
        try (BufferedReader br = new BufferedReader(new FileReader(ruta))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length == 6) {
                    String user = partes[0];
                    for (Estudiante e : listaEstudiante) {
                        if (e.getUsuarioEst().equals(user)) {
                            repetido = true;
                            break;
                        }
                    }
                    if (!repetido) {
                        Estudiante est = new Estudiante();
                        est.setUsuarioEst(partes[0]);
                        est.setContrasenaEst(partes[1]);
                        est.setNombreP(partes[2]);
                        est.setCedulaP(partes[3]);
                        est.setEdadP(Integer.parseInt(partes[4]));
                        est.setTelefonoP(partes[5]);
                        lista.add(est);
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al cargar estudiante: " + e.getMessage());
            throw new Exception();
        }
        return lista;
    }

    public ArrayList<Profesor> cargarProfesoresDesdeArchivo(String ruta) {
        ArrayList<Profesor> lista = new ArrayList<>();
        boolean repetido = false;
        try (BufferedReader br = new BufferedReader(new FileReader(ruta))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length == 7) {
                    String user = partes[0];
                    for (Profesor p : listaProfesores) {
                        if (p.getUsuarioProf().equals(user)) {
                            repetido = true;
                            break;
                        }
                    }
                    if (!repetido) {
                        Profesor prof = new Profesor();
                        prof.setUsuarioProf(partes[0]);
                        prof.setContrasenaProf(partes[1]);
                        prof.setNombreP(partes[2]);
                        prof.setEdadP(Integer.parseInt(partes[3]));
                        prof.setCedulaP(partes[4]);
                        prof.setTelefonoP(partes[5]);
                        prof.setEspecialidadProf(partes[6]);
                        lista.add(prof);
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al cargar profesor: " + e.getMessage());
        }
        return lista;
    }

    public ArrayList<Curso> cargarCursosDesdeArchivo(String ruta) {
        ArrayList<Curso> lista = new ArrayList<>();
        boolean repetido = false;
        try (BufferedReader br = new BufferedReader(new FileReader(ruta))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length == 15) {
                    String id = partes[0];
                    for (Curso c : listaCursos) {
                        if (c.getIdCurso().equals(id)) {
                            repetido = true;
                            break;
                        }
                    }
                    if (!repetido) {
                        Curso curso = new Curso();
                        curso.setIdCurso(partes[0]);
                        curso.setNombreCurso(partes[1]);
                        ArrayList<Profesor> listaProf = new ArrayList<>();
                        ArrayList<String> idProfesores = new ArrayList<>();
                        Collections.addAll(idProfesores, partes[2], partes[3], partes[4]);
                        for (Profesor p : listaProfesores) {
                            if (idProfesores.contains(p.getUsuarioProf())) {
                                listaProf.add(p);
                            }
                        }
                        curso.setListaProfesores(listaProf);
                        ArrayList<Estudiante> listaEst = new ArrayList<>();
                        ArrayList<String> idEstudiantes = new ArrayList<>();
                        Collections.addAll(idEstudiantes, partes[5], partes[6], partes[7], partes[8], partes[9], partes[10], partes[11], partes[12], partes[13], partes[14]);
                        for (Estudiante e : listaEstudiante) {
                            if (idEstudiantes.contains(e.getUsuarioEst())) {
                                listaEst.add(e);
                            }
                        }
                        curso.setListaEstudiantes(listaEst);
                        lista.add(curso);
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al cargar curso: " + e.getMessage());
        }
        return lista;
    }

    public void guardarEstudiantesEnArchivo(String ruta, ArrayList<Estudiante> listaEst) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(ruta))) {
            for (Estudiante e : listaEst) {
                String linea = e.getUsuarioEst() + ";" + e.getContrasenaEst() + ";" + e.getNombreP() + ";" + e.getCedulaP() + ";" + e.getEdadP() + ";" + e.getTelefonoP();
                bw.write(linea);
                bw.newLine();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al guardar el estudiante: " + e.getMessage());
        }
    }

    public void guardarProfesoresEnArchivo(String ruta, ArrayList<Profesor> listaProf) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(ruta))) {
            for (Profesor p : listaProf) {
                String linea = p.getUsuarioProf() + ";" + p.getContrasenaProf() + ";" + p.getNombreP() + ";" + p.getCedulaP() + ";" + p.getEdadP() + ";" + p.getTelefonoP() + ";" + p.getEspecialidadProf();
                bw.write(linea);
                bw.newLine();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al guardar el estudiante: " + e.getMessage());
        }
    }

    public void guardarCursoEnArchivo(String ruta, ArrayList<Curso> listaCurso) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(ruta))) {
            for (Curso c : listaCurso) {
                String linea = c.getIdCurso() + ";" + c.getNombreCurso() + ";" + c.getIDArregloProfesores() + ";" + c.getIDArregloEstudiantes();
                bw.write(linea);
                bw.newLine();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al guardar el curso: " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    Admin dialog = new Admin(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBContratarProfesor;
    private javax.swing.JButton jBCrearNuevoCurso;
    private javax.swing.JButton jBMatricularEstudiante;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
